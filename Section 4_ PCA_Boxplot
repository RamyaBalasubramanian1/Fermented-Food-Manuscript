#install.packages("purrr")
library(purrr)
library(tidyverse)
library(ComplexHeatmap)
library(tibble)
library(dplyr)
#BiocManager::install("ComplexHeatmap")
meta <- read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/meta_insilico.csv")
meta <- meta[,-c(7,8)]
anno <- read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/tryp_anno.csv")
wk <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/wk_final_run/unstrat.txt", sep = "\t", header = TRUE)
mk <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/milk_kefir/unstrat_mod.txt", sep = "\t", header = TRUE)
bai <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/baijiu/unstrat.txt", sep = "\t", header = TRUE)
kom <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/kombucha/unstrat.txt", sep = "\t", header = TRUE)
kin <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/kinema/unstrat.txt", sep = "\t", header = TRUE)
fs <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/FS/unstrat.txt", sep = "\t", header = TRUE)
aff <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/AFF/unstrat.txt", sep = "\t", header = TRUE)
pau <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/Paula/unstrat.txt", sep = "\t", header = TRUE)
######################################
tryp_ko <- read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/tryp_meta.csv")
all <- list(wk, mk, bai, kom, kin, fs, aff, pau)
all <- reduce(all, full_join, by = "KO")

any(duplicated(all$KO))

names(all) <- sapply(names(all), function(col) {
  # Replace dots with hyphens for WK columns
  if (startsWith(col, "WK")) {
    col <- gsub("\\.", "-", col)
  }
  if (startsWith(col, "WKMedia")) {
    col <- gsub("\\_", "-", col)
  }
  
  # Special case for WKMedia
  if (startsWith(col, "WKMedia")) {
    col <- substr(col, 1, 15)
  } else if (startsWith(col, "AF") || startsWith(col, "FS")) {
    col <- substr(col, 1, 4)
  } else if (startsWith(col, "WK")) {
    col <- substr(col, 1, 13)
  } else if (startsWith(col, "PFG")) {
    col <- substr(col, 1, 14)
  } else if (startsWith(col, "SRR11")) {
    col <- substr(col, 1, 11)
  } else if (startsWith(col, "SRR88")) {
    col <- substr(col, 1, 10)
  } else if (startsWith(col, "K")) {
    col <- substr(col, 1, 2)
  } else {
    col <- substr(col, 1, 6)
  }
  
  # Remove trailing underscore
  col <- sub("_$", "", col)
  col <- sub("-$", "", col)
  return(col)
})


colnames(all)
##############################

clean_colnames <- trimws(colnames(all))
clean_meta_ids <- trimws(meta$ID)

invalid_cols <- setdiff(clean_colnames, clean_meta_ids)

invalid_cols
#################################
all[is.na(all)] <- 0
substrate_colors <- c(
  "Dairy" = "#1f77b4", "Sugar" = "#ff7f0e", "Brine" = "#1b9e77",
  "Soy" = "#d62728", "Coconut Dairy" = "#9467bd", "Cereal" = "#8c564b",
  "Root and tuber" = "#e41a1c", "Seed" = "#7f7f7f",  "Palm Tree" = "#B565A7"
)
#################################

library(tidyverse)

tryp <- tryp_ko %>%
  pivot_longer(
    cols = starts_with("KO"),
    names_to = "KO_number",
    values_to = "KO"
  ) %>%
  select(compound, KO) %>%
  filter(!is.na(KO), KO !="0")  # Replace NA with "0"
###################
all$KO <- trimws(as.character(all$KO))
tryp$KO <- trimws(as.character(tryp$KO))
#####################
valid_kos <- unique(tryp$KO)

all <- all[all$KO %in% valid_kos, ]
any(duplicated(all$KO))
###################################################
###################################################
tryp_unique <- tryp %>%
  distinct(KO, .keep_all = TRUE)

all <- all %>%
  left_join(tryp_unique, by = "KO")

any(duplicated(all$KO))
# Get sample names from 'all', excluding 'KO' and 'compound'
sample_names <- colnames(all)[!(colnames(all) %in% c("KO", "compound"))]

# Filter meta to only include those samples as rownames
meta_filtered <- meta[meta$ID %in% sample_names, ]
any(duplicated(all$KO))
###############################
library(pheatmap)
library(dplyr)
library(Tjazi)

ko_matrix <- all %>%
  column_to_rownames("KO") %>%
  select(-compound)

#####################
# Make sure it's a data frame and numeric
ko_matrix <- t(ko_matrix)
pa <- ko_matrix #using this for pa heatmap lateron
ko_matrix <- as.data.frame(ko_matrix)
ko_matrix[] <- lapply(ko_matrix, function(x) as.numeric(as.character(x))) 

# Replace NA with 0 (if needed)
ko_matrix[is.na(ko_matrix)] <- 0


n_zeroes <- rowSums(ko_matrix == 0)
ko_matrix <- ko_matrix[n_zeroes <= round(ncol(ko_matrix) * 0.90),]

ko_matrix <- clr_c(ko_matrix)
rownames(ko_matrix) <- gsub("\\.", "-", rownames(ko_matrix))
data.a.pca <- prcomp(ko_matrix)
###############################
pc1 <- round(data.a.pca$sdev[1]^2/sum(data.a.pca$sdev^2),4) * 100
pc2 <- round(data.a.pca$sdev[2]^2/sum(data.a.pca$sdev^2),4) * 100
pc3 <- round(data.a.pca$sdev[3]^2/sum(data.a.pca$sdev^2),4) * 100
pc4 <- round(data.a.pca$sdev[4]^2/sum(data.a.pca$sdev^2),4) * 100
pca = data.frame(PC1 = data.a.pca$x[,1],
                 PC2 = data.a.pca$x[,2],
                 PC3 = data.a.pca$x[,3],
                 PC4 = data.a.pca$x[,4])

meta_filtered <- meta_filtered[meta_filtered$ID %in% rownames(ko_matrix), ]
extra_meta <- setdiff( rownames(ko_matrix), meta_filtered$ID)
length(extra_meta)#identified the tech reps wk002; remove them
ko_matrix <- ko_matrix[!rownames(ko_matrix) %in% extra_meta, ]
extra_meta <- setdiff( rownames(ko_matrix), meta_filtered$ID)
length(extra_meta)#santy
##################################
meta_filtered <- meta_filtered[meta_filtered$ID %in% rownames(ko_matrix), ]
meta_filtered <- meta_filtered[match(rownames(ko_matrix), meta_filtered$ID), ]
meta_filtered <- meta_filtered[complete.cases(meta_filtered), ]
pca <- pca[rownames(pca) %in% rownames(ko_matrix), ]

pca$ID <- meta_filtered$ID
pca$Substrate <- meta_filtered$Substrate
pca$State <- meta_filtered$State
pca$TOF <- meta_filtered$Type.of.fermentation
#############################################
#PLOTTY
pca$ID <- rownames(pca)


#First, the main plot. Plot the first two components of the PCA
p <- ggplot(pca, aes(x = PC1, y = PC2, fill = Substrate)) +
  geom_point(shape = 21,    # filled circle with outline
             size = 3,
             color = "black",  # border stays black
             stroke = 0.7) +
  scale_fill_manual(values = substrate_colors) +
  labs(
    title = "tryptophan metabolite composition of fermented foods",
    x = paste0("PC1 (", pc1, "%)"),
    y = paste0("PC2 (", pc2, "%)")
  ) +
  theme_minimal() +
  theme(
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12, face = "bold"),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    legend.position = "right"
  )

ggsave("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_4/pca_trypnet_plot.svg", plot = p, width = 8, height = 6, units = "in")
clr_dist <- dist(ko_matrix, method = "euclidean")
adonis_result <- adonis2(clr_dist ~ Substrate+Type.of.fermentation+State, data = meta_filtered, method = "eucledian", permutations = 999, by = "term")
print(adonis_result)
##########################################################
comp_transformed <- scale(ko_matrix / log(2), center = TRUE, scale = FALSE)
tryp <- tryp %>% rename(KEGG = compound)
anno_2 <-merge(anno, tryp, by = "KEGG")
# Make sure KO column names in ko_matrix match anno_2$KO
all(colnames(ko_matrix) %in% anno_2$KO)  # Should be TRUE for all or subset
library(ComplexHeatmap)
library(dplyr)
all(rownames(ko_matrix) %in% meta_filtered$ID) 
# Create named vector: KO -> Metabolite
ko_to_metabolite <- anno_2 %>%
  distinct(KO, Metabolite) %>%
  filter(KO %in% colnames(ko_matrix)) %>%
  tibble::deframe()

# Reorder to match ko_matrix column order
column_annots <- ko_to_metabolite[colnames(ko_matrix)]
# Match metadata order to ko_matrix rows
meta_ordered <- meta_filtered[match(rownames(ko_matrix), meta_filtered$ID), ]

# Build the annotation
row_anno <- rowAnnotation(
  Substrate = meta_ordered$Substrate,
  col = list(Substrate = substrate_colors),
  annotation_name_side = "bottom",
  show_annotation_name = TRUE
)
col_fun <- colorRamp2(
  c(min(ko_matrix), 0, max(ko_matrix)),
  c("blue", "white", "red")
)
# Make HeatmapAnnotation object
col_anno <- HeatmapAnnotation(
  Metabolite = column_annots,
  annotation_name_side = "right",
  gp = gpar(fontsize = 4)
)
ht <- Heatmap(
  as.matrix(ko_matrix),
  name = "CLR Abundance",
  col = col_fun,
  top_annotation = col_anno,
  left_annotation = row_anno,
  cluster_columns = FALSE,          # Don't reorder within metabolite blocks
  cluster_rows = FALSE,
  show_column_names = FALSE,
  show_row_names = FALSE,
  row_names_side = "left",
  column_names_rot = 45,
  row_split = meta_ordered$Substrate,
  row_title = NULL,
  column_split = column_annots, column_title =NULL, border=TRUE      # ðŸ‘ˆ Group all KOs by Metabolite
)

draw(ht)
png("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/ko_heatmap.png",
    width = 12,       # in inches
    height = 10,      # in inches
    units = "in",     
    res = 300         # 300 DPI for publication quality
)

dev.off()
###############################################
library(ComplexHeatmap)
library(circlize)

# Custom Substrate colors
substrate_colors <- c(
  "Dairy" = "#1f77b4", "Sugar" = "#ff7f0e", "Brine" = "#1b9e77",
  "Soy" = "#d62728", "Coconut Dairy" = "#9467bd", "Cereal" = "#8c564b",
  "Root and tuber" = "#e41a1c", "Seed" = "#7f7f7f", "Palm Tree" = "#B565A7"
)

# Convert pa to binary presence/absence matrix
pa_binary <- ifelse(pa > 0, 1, 0)

# Map KO to Metabolite
ko_to_metabolite <- anno_2[!duplicated(anno_2$KO), c("KO", "Metabolite")]
column_annots <- ko_to_metabolite$Metabolite
names(column_annots) <- ko_to_metabolite$KO
column_annots <- column_annots[colnames(pa_binary)]

# Align metadata
meta_ordered <- meta_filtered[match(rownames(pa_binary), meta_filtered$ID), ]

# Row annotation (Substrate)
row_anno <- rowAnnotation(
  Substrate = meta_ordered$Substrate,
  col = list(Substrate = substrate_colors),
  annotation_name_side = "bottom",
  show_annotation_name = TRUE
)

# Column annotation (Metabolite)
col_anno <- HeatmapAnnotation(
  Metabolite = column_annots,
  annotation_name_side = "right",
  gp = gpar(fontsize = 4)
)

# Black-and-white color mapping
bw_col_fun <- colorRamp2(c(0, 1), c("white", "black"))

# Heatmap
ht1 <- Heatmap(
  as.matrix(pa_binary),
  name = "Presence",
  col = bw_col_fun,
  top_annotation = col_anno,
  left_annotation = row_anno,
  cluster_columns = FALSE,
  cluster_rows = FALSE,
  show_column_names = FALSE,
  show_row_names = FALSE,
  row_names_side = "left",
  column_names_rot = 45,
  row_split = meta_ordered$Substrate,
  row_title = NULL,
  column_split = column_annots,
  column_title = NULL,
  border = TRUE
)

# Draw or save
setwd("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_4")
svg("trypnet.svg", width = 10, height = 9) 
draw(ht1)
dev.off()
#################################
richness_table <- data.frame(
  Sample = rownames(pa_binary),
  Richness = rowSums(pa_binary)
)
###############
# KO â†’ Metabolite annotation from anno_2
ko_to_metabolite <- anno_2[!duplicated(anno_2$KO), c("KO", "Metabolite")]
column_annots <- ko_to_metabolite$Metabolite
names(column_annots) <- ko_to_metabolite$KO
column_annots <- column_annots[colnames(pa_binary)]

# Match metadata to sample order
meta_ordered <- meta_filtered[match(rownames(pa_binary), meta_filtered$ID), ]
richness_ordered <- richness_table[match(rownames(pa_binary), richness_table$Sample), ]

# Row annotation: Substrate + Richness (as dots)
row_anno <- rowAnnotation(
  Substrate = meta_ordered$Substrate,
  Richness = anno_points(
    richness_ordered$Richness,
    gp = gpar(col = "red", cex = 0.5),
    axis = TRUE,
    axis_side = "top"
  ),
  col = list(Substrate = substrate_colors),
  annotation_name_side = "top"  # <-- optional
)

# Column annotation: Metabolite
col_anno <- HeatmapAnnotation(
  Metabolite = column_annots,
  annotation_name_side = "right",
  gp = gpar(fontsize = 4)
)

# Black/white color scale
bw_col_fun <- colorRamp2(c(0, 1), c("white", "black"))

# Heatmap
ht1 <- Heatmap(
  as.matrix(pa_binary),
  name = "Presence",
  col = bw_col_fun,
  top_annotation = col_anno,
  left_annotation = row_anno,
  cluster_columns = FALSE,
  cluster_rows = FALSE,
  show_column_names = FALSE,
  show_row_names = FALSE,
  row_names_side = "left",
  column_names_rot = 45,
  row_split = meta_ordered$Substrate,
  row_title = NULL,
  column_split = column_annots,
  column_title = NULL,
  border = TRUE
)
setwd("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_4")
svg("trypnet.svg", width = 10, height = 9) 
draw(ht1)
dev.off()
##############################
richness_table_2 <- richness_table
colnames(richness_table_2)[colnames(richness_table_2)=="Sample"] <- "ID"
all <- merge(richness_table_2, meta_ordered, by = "ID")
p <- ggplot(all, aes(x = Substrate, y = Richness, fill = Substrate)) +
  geom_boxplot(color = "black", outlier.shape = NA) +
  geom_jitter(shape = 21,
              color = "black",
              size = 2,
              stroke = 0.5,
              width = 0.2) +
  scale_fill_manual(values = substrate_colors) +
  labs(
    x = "Substrate",
    y = "Richness",
    title = "Richness by Substrate with Sample Distribution"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title = element_text(size = 12, face = "bold"),
    legend.position = "none"
  )
ggsave("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_4/richness_trypnet_plot.svg", plot = p, width = 8, height = 6, units = "in")
shapiro.test(all$Richness)
kruskal.test(Richness ~ Substrate, data = all)
kruskal.test(Richness ~ State, data = all)
kruskal.test(Type.of.fermentation ~ Richness, data = all)
# Substrate
all %>%
  kruskal_effsize(Richness ~ Substrate)

# State
all %>%
  kruskal_effsize(Richness ~ State)

# Type of fermentation
all %>%
  kruskal_effsize(Richness ~ Type.of.fermentation)
