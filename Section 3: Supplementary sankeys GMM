#install.packages("compositions")  
library(compositions)
library(stringr)
library(janitor)
library(ggplot2)
library(janitor)
library(dplyr)
library(compositions)
library(ghibli)
library(factoextra)
library(patchwork)
library(pheatmap)
library(ComplexHeatmap)
install.packages("coloRamPalette")
library(colorRampPalette)
# Install the circlize package if not already installed
if (!requireNamespace("circlize", quietly = TRUE)) {
  install.packages("circlize")
}
library(rstatix)
library(ggpubr)
library(FSA)
library(circlize)
library(ggforce)
library(vegan)
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(factoextra)) install.packages("factoextra")
library(gridExtra)
library(ggplot2)
library(factoextra)
#install.packages("devtools")
#devtools::install_github("pmartinezarbizu/pairwiseAdonis", force = TRUE)
library(pairwiseAdonis)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
#install.packages("ggalluvial")
library(ggalluvial)
#install.packages("ggsankey")
library(ggsankey)
#install.packages("networkD3")
library(networkD3)
library(htmlwidgets)
library(purrr)
library(compositions)
library(Tjazi)
library(ComplexHeatmap)
library(circlize)
library(dplyr)
library(igraph)
library(ggraph)
library(ggplot2)
library(patchwork)
########################


########################################################
########################################################

mk_strat <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/milk_kefir/gmm_strat/modules.tsv")
mk_strat <- row_to_names(mk_strat, 1)
mk_strat[, 3:ncol(mk_strat)] <- lapply(mk_strat[, 3:ncol(mk_strat)], as.numeric)
str(mk_strat)
library(tidyr)

mk_long <- pivot_longer(mk_strat, 
                        cols = -c(Taxon, Module), 
                        names_to = "Sample", 
                        values_to = "Contribution")
mk_long <- mk_long[mk_long$Contribution > 0, ]

anno <-read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/annotation_gmm.csv")
dim(anno)
meta <- read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/meta_insilico.csv")
meta <- meta[,-c(7,8)]

mk_long_annotated <- merge(mk_long, anno, by = "Module", all.x = TRUE)
mk_long_annotated$Module <- NULL
names(mk_long_annotated)[names(mk_long_annotated) == "Annotation"] <- "Module"
################
links <- aggregate(Contribution ~ Taxon + Superpathway, data = mk_long_annotated, sum)
names(links) <- c("source", "target", "value")
nodes <- data.frame(name = unique(c(links$source, links$target)))
links$source <- match(links$source, nodes$name) - 1
links$target <- match(links$target, nodes$name) - 1
p <- sankeyNetwork(Links = links, Nodes = nodes,
                   Source = "source", Target = "target",
                   Value = "value", NodeID = "name",
                   fontSize = 12, nodeWidth = 30)
htmlwidgets::saveWidget(p, "C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.html")
webshot2::webshot("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.html", file = "C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.pdf", selector = "pdf")
###########################


# Aggregate for Taxon → Annotation
links1 <- aggregate(Contribution ~ Taxon + Superpathway, data = mk_long_annotated, sum)
names(links1) <- c("source", "target", "value")

# Aggregate for Annotation → Molecule
links2 <- aggregate(Contribution ~ Superpathway + Level_2, data = mk_long_annotated, sum)
names(links2) <- c("source", "target", "value")

# Combine both levels
links <- rbind(links1, links2)

# Create unique list of all nodes
nodes <- data.frame(name = unique(c(links$source, links$target)))

# Map node names to indices (0-based for networkD3)
links$source <- match(links$source, nodes$name) - 1
links$target <- match(links$target, nodes$name) - 1

# Create Sankey plot
p <- sankeyNetwork(Links = links, Nodes = nodes,
                   Source = "source", Target = "target",
                   Value = "value", NodeID = "name",
                   fontSize = 12, nodeWidth = 30)
htmlwidgets::saveWidget(p, "C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.html")
webshot2::webshot("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.html", file = "C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/final_figs/section_3/sankey_plot_mk_gmm.pdf", selector = "pdf")
############################################
#applying prevalence cutoffs
# Step 1: Filter valid contributions and exclude unwanted annotations
filtered_data <- mk_long_annotated %>%
  filter(Contribution > 0)

# Step 2: Keep taxa present in *all* samples (based on Contribution > 0)
total_samples <- filtered_data %>%
  distinct(Sample) %>%
  nrow()

taxa_prevalent <- filtered_data %>%
  distinct(Taxon, Sample) %>%
  group_by(Taxon) %>%
  summarise(n_samples = n(), .groups = "drop") %>%
  filter(n_samples / total_samples >= 0.3) %>%
  pull(Taxon)

filtered_data <- filtered_data %>%
  filter(Taxon %in% taxa_prevalent)

# Step 3: Keep only taxa with >3 unique annotations
taxa_to_keep <- filtered_data %>%
  group_by(Taxon) %>%
  summarise(n_annotations = n_distinct(Superpathway), .groups = "drop") %>%
  filter(n_annotations > 2) %>%
  pull(Taxon)

filtered_data <- filtered_data %>%
  filter(Taxon %in% taxa_to_keep)

# Step 4: Create edges
# Taxon → Annotation
edges1 <- filtered_data %>%
  distinct(Taxon, Superpathway) %>%
  mutate(value = 1,
         source = as.character(Taxon),
         target = as.character(Superpathway)) %>%
  select(source, target, value)

# Annotation → Molecule
edges2 <- filtered_data %>%
  distinct(Superpathway, Level_2) %>%
  mutate(value = 1,
         source = as.character(Superpathway),
         target = as.character(Level_2)) %>%
  select(source, target, value)

# Step 5: Combine edges and create node list
all_edges <- bind_rows(edges1, edges2)

nodes <- data.frame(name = unique(c(all_edges$source, all_edges$target)), stringsAsFactors = FALSE)

all_edges <- all_edges %>%
  mutate(source_id = match(source, nodes$name) - 1,
         target_id = match(target, nodes$name) - 1)

# Final check for NA
stopifnot(!any(is.na(all_edges$source_id)), !any(is.na(all_edges$target_id)))

# Step 6: Plot Sankey
P <- sankeyNetwork(Links = all_edges,
                   Nodes = nodes,
                   Source = "source_id",
                   Target = "target_id",
                   Value = "value",
                   NodeID = "name",
                   fontSize = 12,
                   nodeWidth = 30)

# View
P
##########################################################################
##########################################################################
##########################################################################
wk_strat <- read.table("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/wk_final_run/gmm_strat/modules.tsv")
wk_strat <- row_to_names(wk_strat, 1)
wk_strat[, 3:ncol(wk_strat)] <- lapply(wk_strat[, 3:ncol(wk_strat)], as.numeric)
str(wk_strat)
library(tidyr)

wk_long <- pivot_longer(wk_strat, 
                        cols = -c(Taxon, Module), 
                        names_to = "Sample", 
                        values_to = "Contribution")
wk_long <- wk_long[wk_long$Contribution > 0, ]
anno <-read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/annotation_gmm.csv")
dim(anno)
#################
#################
meta <- read.csv("C:/Users/Ramya.Balasubramania/Desktop/paper_1/IN-SILICO/in-silico_master_file/meta_insilico.csv")
meta <- meta[,-c(7,8)]
wk_long_annotated <- merge(wk_long,anno, by = "Module", all.x = TRUE)
wk_long_annotated$Module <- NULL
names(wk_long_annotated)[names(wk_long_annotated) == "Annotation"] <- "Module"

###########
# Step 1: Filter data
filtered_data <- wk_long_annotated %>%
  filter(Contribution > 0) 

# Step 2: Keep only taxa with >3 unique annotations
taxa_to_keep <- filtered_data %>%
  group_by(Taxon) %>%
  summarise(n_annotations = n_distinct(Superpathway), .groups = "drop") %>%
  filter(n_annotations > 3) %>%
  pull(Taxon)

filtered_data <- filtered_data %>%
  filter(Taxon %in% taxa_to_keep)

# Step 3: Create edges
# Taxon → Annotation
edges1 <- filtered_data %>%
  distinct(Taxon, Superpathway) %>%
  mutate(value = 1,
         source = as.character(Taxon),
         target = as.character(Superpathway)) %>%
  select(source, target, value)

# Annotation → Molecule
edges2 <- filtered_data %>%
  distinct(Superpathway, Level_2) %>%
  mutate(value = 1,
         source = as.character(Superpathway),
         target = as.character(Level_2)) %>%
  select(source, target, value)

# Combine edges
all_edges <- bind_rows(edges1, edges2)

# Step 4: Create node list and map to IDs
nodes <- data.frame(name = unique(c(all_edges$source, all_edges$target)), stringsAsFactors = FALSE)

all_edges <- all_edges %>%
  mutate(source_id = match(source, nodes$name) - 1,
         target_id = match(target, nodes$name) - 1)

# Final check for NA
stopifnot(!any(is.na(all_edges$source_id)), !any(is.na(all_edges$target_id)))

# Step 5: Plot Sankey
P <- sankeyNetwork(Links = all_edges,
                   Nodes = nodes,
                   Source = "source_id",
                   Target = "target_id",
                   Value = "value",
                   NodeID = "name",
                   fontSize = 12,
                   nodeWidth = 30)

# View
P
#######################################
#######apply a 30% prevalence threshold#
##########################################
library(dplyr)
library(networkD3)

# Step 1: Filter valid contributions and exclude unwanted annotations
filtered_data <- wk_long_annotated %>%
  filter(Contribution > 0) 

# Step 2: Keep taxa present in *all* samples (based on Contribution > 0)
total_samples <- filtered_data %>%
  distinct(Sample) %>%
  nrow()

taxa_prevalent <- filtered_data %>%
  distinct(Taxon, Sample) %>%
  group_by(Taxon) %>%
  summarise(n_samples = n(), .groups = "drop") %>%
  filter(n_samples / total_samples >= 0.5) %>%
  pull(Taxon)

filtered_data <- filtered_data %>%
  filter(Taxon %in% taxa_prevalent)

# Step 3: Keep only taxa with >3 unique annotations
taxa_to_keep <- filtered_data %>%
  group_by(Taxon) %>%
  summarise(n_annotations = n_distinct(Superpathway), .groups = "drop") %>%
  filter(n_annotations > 3) %>%
  pull(Taxon)

filtered_data <- filtered_data %>%
  filter(Taxon %in% taxa_to_keep)

# Step 4: Create edges
# Taxon → Annotation
edges1 <- filtered_data %>%
  distinct(Taxon, Superpathway) %>%
  mutate(value = 1,
         source = as.character(Taxon),
         target = as.character(Superpathway)) %>%
  select(source, target, value)

# Annotation → Molecule
edges2 <- filtered_data %>%
  distinct(Superpathway, Level_2) %>%
  mutate(value = 1,
         source = as.character(Superpathway),
         target = as.character(Level_2)) %>%
  select(source, target, value)

# Step 5: Combine edges and create node list
all_edges <- bind_rows(edges1, edges2)

nodes <- data.frame(name = unique(c(all_edges$source, all_edges$target)), stringsAsFactors = FALSE)

all_edges <- all_edges %>%
  mutate(source_id = match(source, nodes$name) - 1,
         target_id = match(target, nodes$name) - 1)

# Final check for NA
stopifnot(!any(is.na(all_edges$source_id)), !any(is.na(all_edges$target_id)))

# Step 6: Plot Sankey
P <- sankeyNetwork(Links = all_edges,
                   Nodes = nodes,
                   Source = "source_id",
                   Target = "target_id",
                   Value = "value",
                   NodeID = "name",
                   fontSize = 12,
                   nodeWidth = 30)

# View
P
##########################################
